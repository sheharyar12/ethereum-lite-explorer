import * as tslib_1 from "tslib";
import * as React from "react";
import styled from "../../styled-components";
import { Sidebar } from "./Sidebar";
import { LogoContainer } from "./LogoContainer";
import { Spacer } from "../Spacer";
import { observable, when, action } from "mobx";
import { getOffset } from "@puzzl/browser/lib/dom";
import { observer } from "mobx-react";
import { SidebarPageTitle } from "./SidebarPageTitle";
const SPACER_HEIGHT = 64;
const MAX_COLUMNS = 7;
const ListAsideRoot = styled.div.withConfig({ displayName: "ListAsideRoot", componentId: "sc-50zjnv" }) `
    flex: 1 1 auto;
    overflow: hidden;
    display: flex;
    flex-wrap: wrap;
    flex-direction: column;
    align-content: center;
    align-items: center;
`;
let SidebarColumns = class SidebarColumns extends React.Component {
    constructor() {
        super(...arguments);
        this.stickyMode = true;
        this.handleResize = () => {
            this.doLayout();
        };
    }
    render() {
        return (React.createElement(Sidebar, { contentRef: ref => this.rootEl = ref, sticky: this.stickyMode, mobileVisible: this.props.mobileVisible },
            React.createElement(SidebarPageTitle, null, this.props.pageTitle),
            React.createElement(LogoContainer, null, this.props.Logo),
            React.createElement(Spacer, { height: `${SPACER_HEIGHT}px` }),
            React.createElement("div", { style: {
                    height: this.listHeight,
                    display: "flex",
                    minHeight: 0
                }, ref: ref => this.listEl = ref },
                React.createElement(ListAsideRoot, null, this.props.children))));
    }
    componentDidMount() {
        window.addEventListener("resize", this.handleResize);
        when(() => !!this.listEl && !!this.rootEl, () => {
            this.doLayout();
        });
    }
    componentDidUpdate(prevProps) {
        if (this.props.children !== prevProps.children || this.props.itemSize !== prevProps.itemSize) {
            this.doLayout();
        }
    }
    componentWillUnmount() {
        window.removeEventListener("resize", this.handleResize);
    }
    doLayout() {
        if (!this.listEl || !this.rootEl) {
            return;
        }
        let listOffsetTop = getOffset(this.listEl).top;
        let bottomSpacing = parseInt(getComputedStyle(this.rootEl).getPropertyValue("padding-bottom"), 10);
        let viewportHeight = window.innerHeight;
        let availListHeight = viewportHeight - bottomSpacing - listOffsetTop;
        if (!this.props.children) {
            this.setSticky(true);
            return;
        }
        let maxItemsPerColumn = Math.floor(availListHeight / this.props.itemSize);
        let maxItems = MAX_COLUMNS * maxItemsPerColumn;
        if (this.props.children.length > maxItems) {
            let itemsPerColumn = Math.ceil(this.props.children.length / MAX_COLUMNS);
            this.setSticky(false, itemsPerColumn * this.props.itemSize);
        }
        else {
            this.setSticky(true);
        }
    }
    setSticky(enabled, listHeight) {
        this.stickyMode = enabled;
        this.listHeight = listHeight;
    }
};
tslib_1.__decorate([
    observable.ref
], SidebarColumns.prototype, "listEl", void 0);
tslib_1.__decorate([
    observable.ref
], SidebarColumns.prototype, "rootEl", void 0);
tslib_1.__decorate([
    observable
], SidebarColumns.prototype, "listHeight", void 0);
tslib_1.__decorate([
    observable
], SidebarColumns.prototype, "stickyMode", void 0);
tslib_1.__decorate([
    action
], SidebarColumns.prototype, "setSticky", null);
SidebarColumns = tslib_1.__decorate([
    observer
], SidebarColumns);
export { SidebarColumns };
//# sourceMappingURL=SidebarColumns.js.map
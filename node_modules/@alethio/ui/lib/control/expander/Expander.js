import * as React from "react";
import { ValueBox } from "../../layout/content/box/ValueBox";
import styled, { css } from "../../styled-components";
import { ExpanderIcon } from "./ExpanderIcon";
import { Number } from "../../data/Number";
const ExpanderRoot = styled("div").withConfig({ displayName: "ExpanderRoot", componentId: "sc-w9jh7y" }) `
    cursor: ${props => props.disabled ? "default" : "pointer"};
    user-select: none;
    box-shadow: 0 2px 6px 0 rgba(0,0,0,0.04);
`;
const ExpanderLabel = styled.div.withConfig({ displayName: "ExpanderLabel", componentId: "sc-1n2n74y" }) `
    margin-right: 8px;
`;
const ExpanderValue = styled("span").withConfig({ displayName: "ExpanderValue", componentId: "sc-1qeuxic" }) `
    color: ${props => props.disabled ?
    props.theme.colors.expanderDisabled :
    props.open ? props.theme.colors.expanderOpenValue : props.theme.colors.expanderValue};
    margin-left: 8px;
    margin-right: 8px;
`;
const StyledValueBox = styled(ValueBox).withConfig({ displayName: "StyledValueBox", componentId: "sc-6ol3d9" }) `
    transition: background-color .2s ease-in-out, border-color .2s ease-in-out;
    border-radius: 4px;
`;
const ExpanderContent = styled("div").withConfig({ displayName: "ExpanderContent", componentId: "sc-1774k6j" }) `
    display: flex;
    ${props => props.fullWidth ? css `
    width: 100%;

    & ${ExpanderValue} {
        flex-grow: 1;
        text-align: right;
    }
    ` : ``}
`;
const hasPropsWithValue = (props) => {
    return props.value !== void 0;
};
export class Expander extends React.Component {
    constructor() {
        super(...arguments);
        this.handleClick = () => {
            if (this.props.onClick && !this.props.disabled) {
                this.props.onClick();
            }
        };
    }
    render() {
        let value;
        let locale;
        if (hasPropsWithValue(this.props)) {
            value = this.props.value;
            locale = this.props.locale;
        }
        let { label, open, disabled } = this.props;
        return (React.createElement(ExpanderRoot, { onClick: this.handleClick, disabled: disabled },
            React.createElement(StyledValueBox, { colors: (theme) => ({
                    background: open ? theme.colors.expanderOpenBg : theme.colors.expanderBg,
                    text: disabled ?
                        theme.colors.expanderDisabled :
                        open ? theme.colors.expanderOpenLabel : theme.colors.expanderLabel
                }), variant: "big", fullWidth: this.props.fullWidth },
                React.createElement(ExpanderContent, { fullWidth: this.props.fullWidth },
                    React.createElement(ExpanderLabel, null, label),
                    value !== void 0 ?
                        React.createElement(ExpanderValue, { open: open, disabled: disabled },
                            React.createElement(Number, { locale: locale, value: value }))
                        : null,
                    React.createElement(ExpanderIcon, { expanded: open })))));
    }
    componentDidUpdate(prevProps) {
        if (prevProps.label !== this.props.label ||
            prevProps.value !== this.props.value) {
            const onResize = this.props.onResize;
            if (onResize) {
                setTimeout(onResize);
            }
        }
    }
}
//# sourceMappingURL=Expander.js.map
import { MixedCollection } from "./MixedCollection";
import { IDataSource } from "plugin-api/IDataSource";
import { IDataAdapter } from "plugin-api/IDataAdapter";
import { IPageDef } from "plugin-api/IPageDef";
import { IContextDef } from "plugin-api/IContextDef";
import { IModuleDef } from "plugin-api/IModuleDef";
import { IPluginApi } from "plugin-api/IPluginApi";
export declare type EntityType = IDataSource | IDataAdapter<any, any> | IPageDef<any, any> | IContextDef<any, any> | IModuleDef<any, any, any>;
export declare class EntityCollection implements IPluginApi {
    private allEntities;
    private dataSources;
    private dataAdapters;
    private pageDefs;
    private moduleDefs;
    private contextDefs;
    addDataSource(uri: string, dataSource: IDataSource): void;
    addDataAdapter(uri: string, dataAdapter: IDataAdapter<any, any>): void;
    addPageDef(uri: string, pageDef: IPageDef<any, any>): void;
    addModuleDef(uri: string, moduleDef: IModuleDef<any, any, any>): void;
    addContextDef(uri: string, contextDef: IContextDef<any, any>): void;
    getDataSources(): MixedCollection<string, IDataSource>;
    getDataAdapters(): MixedCollection<string, IDataAdapter<any, any>>;
    getPageEntities(): MixedCollection<string, IPageDef<any, any> | IModuleDef<any, any, any> | IContextDef<any, any>>;
    get<T extends EntityType>(uri: string): T;
    merge(e: this): void;
}
//# sourceMappingURL=EntityCollection.d.ts.map
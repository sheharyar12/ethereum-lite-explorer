import { AsyncData } from "./AsyncData";
import { IDataAdapter } from "plugin-api/IDataAdapter";
import { MixedCollection } from "./MixedCollection";
import { ILogger } from "plugin-api/ILogger";
export declare class DataLoader<TContext, TDataAdapterType extends string = string> {
    dataAdapters: MixedCollection<TDataAdapterType, IDataAdapter<TContext, unknown>>;
    private logger;
    private resetOnFetch;
    private asyncData;
    private dataFetchTasks;
    private dataRefreshCallbacks;
    private dataWatchers;
    private context;
    private depsMap;
    constructor(dataAdapterTypes: TDataAdapterType[], dataAdapters: MixedCollection<TDataAdapterType, IDataAdapter<TContext, unknown>>, logger: ILogger, resetOnFetch?: boolean);
    private buildDepsMap;
    load(context: TContext): void;
    dispose(): void;
    private updateData;
    private fetchData;
    private refreshDependentAdapters;
    private getDepAdapterData;
    private setupWatcher;
    private destroyWatcher;
    getData(): Map<TDataAdapterType, AsyncData<unknown>>;
}
//# sourceMappingURL=DataLoader.d.ts.map
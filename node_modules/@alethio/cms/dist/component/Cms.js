import { __decorate } from "tslib";
import * as React from "react";
import { PluginManager } from "../PluginManager";
import { CmsConfig } from "../CmsConfig";
import { LoadStatus } from "../LoadStatus";
import { observer } from "mobx-react";
import { observable } from "mobx";
import { PageRenderer } from "./PageRenderer";
import { ThemeContext } from "../ThemeContext";
import { ThemeProvider as StyledThemeProvider } from "styled-components";
import { version as cmsVersion } from "../version";
let Cms = class Cms extends React.Component {
    constructor(props) {
        super(props);
        this.loadStatus = LoadStatus.Loading;
        let cmsConfig = new CmsConfig(this.props.logger).fromJson(this.props.config);
        let inlinePlugins = new Map(props.inlinePlugins ?
            Object.keys(props.inlinePlugins).map(k => ([k, props.inlinePlugins[k]])) :
            []);
        let pluginManager = new PluginManager(this.props.logger, cmsConfig, inlinePlugins);
        this.props.logger.info(`Initializing Alethio CMS @ ${cmsVersion}...`);
        pluginManager.loadPlugins()
            .then(cmsRendererConfig => {
            this.cmsRendererConfig = cmsRendererConfig;
            this.loadStatus = LoadStatus.Loaded;
        })
            .catch(e => {
            this.props.logger.error(e);
            this.loadStatus = LoadStatus.Error;
        });
    }
    render() {
        return React.createElement(ThemeContext.Provider, { value: this.props.theme },
            React.createElement(StyledThemeProvider, { theme: this.props.theme }, this.renderPage()));
    }
    renderPage() {
        if (this.loadStatus === LoadStatus.Error) {
            return this.props.renderErrorPlaceholder();
        }
        if (this.loadStatus === LoadStatus.Loading) {
            return this.props.renderLoadingPlaceholder();
        }
        let { dataAdapters, pages, plugins, rootModules, pluginConfigMetas } = this.cmsRendererConfig;
        return React.createElement(PageRenderer, { dataAdapters: dataAdapters, pages: pages, plugins: plugins, pluginConfigMetas: pluginConfigMetas, rootModules: rootModules, logger: this.props.logger, locale: this.props.locale, defaultLocale: this.props.defaultLocale, basePath: this.props.config.basePath, HelpComponent: this.props.HelpComponent, renderErrorPage: this.props.renderErrorPage, renderErrorPlaceholder: this.props.renderErrorPlaceholder, renderLoadingPlaceholder: this.props.renderLoadingPlaceholder }, this.props.children);
    }
};
__decorate([
    observable
], Cms.prototype, "loadStatus", void 0);
Cms = __decorate([
    observer
], Cms);
export { Cms };
//# sourceMappingURL=Cms.js.map
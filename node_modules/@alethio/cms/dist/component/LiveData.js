import { __decorate } from "tslib";
import * as React from "react";
import { observable } from "mobx";
import { observer } from "mobx-react";
import { AsyncData } from "../AsyncData";
import { ErrorBoundary } from "@alethio/ui/lib/util/react/ErrorBoundary";
let LiveData = class LiveData extends React.Component {
    constructor(props) {
        super(props);
        this.contentComponentBoxed = new AsyncData();
        this.props.ContentComponent.then(ContentComponent => {
            this.contentComponentBoxed.update(ContentComponent);
        }).catch(e => {
            this.props.logger.error("Couldn't load live data content component", e);
            this.contentComponentBoxed.update(void 0);
        });
    }
    render() {
        let asyncData = this.props.asyncData;
        let requiredData = this.props.requiredAdapterTypes
            .map(dataAdapterType => asyncData.get(dataAdapterType));
        let { LoadingComponent, ErrorComponent } = this.props;
        if (requiredData.some(data => data.isLoading()) || this.contentComponentBoxed.isLoading()) {
            return LoadingComponent ?
                React.createElement(LoadingComponent, Object.assign({ asyncData: asyncData }, this.props.contentProps)) : null;
        }
        let errorBox = ErrorComponent ?
            React.createElement(ErrorComponent, Object.assign({ asyncData: asyncData }, this.props.contentProps)) : null;
        if (requiredData.some(data => !data.isLoaded()) || !this.contentComponentBoxed.isLoaded()) {
            return errorBox;
        }
        let ContentComponent = this.contentComponentBoxed.data;
        return React.createElement(ErrorBoundary, { errorEl: errorBox, logger: this.props.logger },
            React.createElement(ContentComponent, Object.assign({ asyncData: asyncData }, this.props.contentProps)));
    }
};
__decorate([
    observable.ref
], LiveData.prototype, "contentComponentBoxed", void 0);
LiveData = __decorate([
    observer
], LiveData);
export { LiveData };
//# sourceMappingURL=LiveData.js.map
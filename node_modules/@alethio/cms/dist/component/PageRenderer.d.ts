import * as React from "react";
import { ILogger } from "plugin-api/ILogger";
import { SidebarMobileStore } from "../SidebarMobileStore";
import { IModule } from "../IModule";
import { IPage } from "../IPage";
import { IDataAdapter } from "plugin-api/IDataAdapter";
import { MixedCollection } from "../MixedCollection";
import { IPlugin } from "plugin-api/IPlugin";
import { HelpMode } from "./HelpMode";
import { IHelpComponentProps } from "./IHelpComponentProps";
import { IPluginConfigMeta } from "../IPluginConfigMeta";
export interface IRootPageProps<TSlotType extends string | number> {
    routes: JSX.Element;
    sidebarMobileStore: SidebarMobileStore;
    slots?: Record<TSlotType, JSX.Element[]>;
    helpMode: HelpMode;
}
export interface IPageRendererProps<TRootSlotType extends string | number> {
    plugins: MixedCollection<string, IPlugin>;
    pluginConfigMetas: MixedCollection<string, IPluginConfigMeta<unknown>>;
    dataAdapters: MixedCollection<string, IDataAdapter<unknown, unknown>>;
    pages: IPage<any, any>[];
    rootModules: Record<TRootSlotType, IModule<any, {}>[]>;
    logger: ILogger;
    locale: string;
    defaultLocale: string;
    basePath?: string;
    HelpComponent?: React.ComponentType<IHelpComponentProps>;
    children(props: IRootPageProps<TRootSlotType>): React.ReactNode;
    renderErrorPage(): React.ReactNode;
    renderErrorPlaceholder(): JSX.Element | null;
    renderLoadingPlaceholder(): JSX.Element | null;
}
export declare class PageRenderer<TRootSlotType extends string | number> extends React.Component<IPageRendererProps<TRootSlotType>> {
    private translationStore;
    private sidebarMobileStore;
    private dataLoaders;
    private linkContext;
    private rootContext;
    private toolbarUiState;
    private helpMode;
    private helpOpenFor;
    constructor(props: IPageRendererProps<TRootSlotType>);
    componentDidUpdate(prevProps: IPageRendererProps<TRootSlotType>): void;
    render(): JSX.Element | null;
    private renderPages;
    private renderPageRoutes;
    private createDataLoader;
    private collectAdapterUris;
    private filterMissingAdapters;
    private collectPageCriticalDataAdapterTypes;
    private isPromise;
    private renderPageContent;
    private renderContext;
    private isContext;
    private isModule;
    private isRefAdapterConfig;
    private renderChildren;
    private renderChild;
    private renderModule;
    private moduleHasAncestorWithHelp;
}
//# sourceMappingURL=PageRenderer.d.ts.map
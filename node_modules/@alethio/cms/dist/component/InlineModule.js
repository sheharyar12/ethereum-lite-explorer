import * as React from "react";
import { DataContext } from "./DataContext";
import { DataLoader } from "../DataLoader";
import { MixedCollection } from "../MixedCollection";
import { LiveData } from "./LiveData";
import { observer } from "mobx-react";
import { mapModuleData } from "../mapModuleData";
export class InlineModule extends React.Component {
    constructor(props) {
        super(props);
        this.createDataLoader(this.props.moduleDef);
    }
    componentDidUpdate(prevProps) {
        if (this.props.moduleDef !== prevProps.moduleDef) {
            this.createDataLoader(this.props.moduleDef);
        }
    }
    createDataLoader(moduleDef) {
        let dataAdapterTypes = moduleDef.dataAdapters.map(adapter => adapter.alias);
        let dataAdapterCollection = new MixedCollection();
        moduleDef.dataAdapters.forEach(adapter => dataAdapterCollection.add(adapter.alias, adapter.def));
        this.dataLoader = new DataLoader(dataAdapterTypes, dataAdapterCollection, this.props.logger);
    }
    render() {
        let contentComponentPromise = this.props.moduleDef.getContentComponent().then(C => observer((liveProps) => React.createElement(C, Object.assign({}, this.props.moduleDef.getContentProps(liveProps)))));
        const getErrorPlaceholder = this.props.moduleDef.getErrorPlaceholder;
        const getLoadingPlaceholder = this.props.moduleDef.getLoadingPlaceholder;
        let requiredAdapterTypes = this.props.moduleDef.dataAdapters
            .filter(adapter => !adapter.optional)
            .map(adapter => adapter.alias) || [];
        return React.createElement(DataContext, { context: this.props.context, dataLoader: this.dataLoader },
            React.createElement(LiveData, { ContentComponent: contentComponentPromise, ErrorComponent: getErrorPlaceholder ? liveProps => getErrorPlaceholder(liveProps) : void 0, LoadingComponent: getLoadingPlaceholder ? liveProps => getLoadingPlaceholder(liveProps) : void 0, contentProps: this.props.extraContentProps || {}, logger: this.props.logger, asyncData: mapModuleData(this.props.moduleDef.dataAdapters, this.dataLoader, ""), requiredAdapterTypes: requiredAdapterTypes }));
    }
}
//# sourceMappingURL=InlineModule.js.map
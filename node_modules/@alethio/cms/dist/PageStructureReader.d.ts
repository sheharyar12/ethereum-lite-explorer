import { IPage } from "./IPage";
import { MixedCollection } from "./MixedCollection";
import { IPageDef } from "plugin-api/IPageDef";
import { IModuleDef } from "plugin-api/IModuleDef";
import { IContextDef } from "plugin-api/IContextDef";
import { IModule } from "./IModule";
import { EntityType } from "./EntityCollection";
import { ILogger } from "plugin-api/ILogger";
import { PageStructureValidator } from "./PageStructureValidator";
export interface IPageConfigNode {
    def: string;
    pageCritical?: boolean;
    options?: unknown;
    children?: Record<string, IPageConfigNode[]> | IPageConfigNode[];
}
declare type DefType = IPageDef<any, any> | IModuleDef<any, any, any> | IContextDef<any, any>;
export declare class PageStructureReader {
    private defs;
    private validator;
    private ownerPlugins;
    private logger;
    constructor(defs: MixedCollection<string, DefType>, validator: PageStructureValidator, ownerPlugins: Map<EntityType, string>, logger: ILogger);
    read(pagesConfig: IPageConfigNode[]): IPage<any, any>[];
    readModuleMap(modules: Record<string, IPageConfigNode[]>): Record<string, IModule<any, any, any>[]>;
    private readNode;
    private mapObjectKeys;
}
export {};
//# sourceMappingURL=PageStructureReader.d.ts.map
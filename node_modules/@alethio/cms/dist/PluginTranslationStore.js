import { __awaiter, __decorate } from "tslib";
import { observable } from "mobx";
import { MixedCollection } from "./MixedCollection";
import { Translation } from "./Translation";
export class PluginTranslationStore {
    constructor(plugins, pluginConfigMetas, defaultLocale) {
        this.plugins = plugins;
        this.pluginConfigMetas = pluginConfigMetas;
        this.defaultLocale = defaultLocale;
    }
    loadTranslations(locale) {
        return __awaiter(this, void 0, void 0, function* () {
            let translations = new MixedCollection();
            let translationsPromises = [...this.plugins.entries()]
                .map(([uri, plugin]) => {
                if (!plugin.getAvailableLocales || !plugin.loadTranslations) {
                    return Promise.resolve([uri, {}]);
                }
                let pluginLocale = plugin.getAvailableLocales().indexOf(locale) === -1 ? this.defaultLocale : locale;
                return plugin.loadTranslations(pluginLocale).then(data => ([uri, data]));
            });
            let loadedTranslations = yield Promise.all(translationsPromises);
            loadedTranslations.forEach(([uri, translationJson]) => {
                var _a, _b;
                translationJson = Object.assign(Object.assign({}, translationJson), (_b = (_a = this.pluginConfigMetas.get(uri).translations) === null || _a === void 0 ? void 0 : _a[locale], (_b !== null && _b !== void 0 ? _b : {})));
                translations.add(uri, new Translation(translationJson));
            });
            this.translations = translations;
        });
    }
    isLoaded() {
        return !!this.translations;
    }
    getTranslations(pluginUri) {
        if (!pluginUri.match(/^(inline-)?plugin:\/\//)) {
            throw new Error(`Invalid plugin URI "${pluginUri}"`);
        }
        return this.translations && this.translations.get(pluginUri);
    }
}
__decorate([
    observable
], PluginTranslationStore.prototype, "translations", void 0);
//# sourceMappingURL=PluginTranslationStore.js.map
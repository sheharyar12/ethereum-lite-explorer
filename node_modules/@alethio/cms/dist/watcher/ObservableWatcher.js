import { autorun } from "mobx";
import { EventDispatcher } from "@puzzl/core/lib/event/EventDispatcher";
export class ObservableWatcher {
    constructor(expression, throttleSeconds = 0) {
        this.expression = expression;
        this.throttleSeconds = throttleSeconds;
        this.dataRefreshEvent = new EventDispatcher();
    }
    get onData() {
        return this.dataRefreshEvent.asEvent();
    }
    watch() {
        this.refreshDisposer = autorun(() => {
            this.expression();
            if (this.throttleSeconds) {
                let now = Date.now();
                let prevTime = this.lastEventTime;
                if (prevTime && now - prevTime < 1000 * this.throttleSeconds) {
                    return;
                }
                this.lastEventTime = now;
            }
            this.dataRefreshEvent.dispatch(void 0, void 0);
        });
    }
    unwatch() {
        if (this.refreshDisposer) {
            this.refreshDisposer();
            this.refreshDisposer = void 0;
        }
    }
}
//# sourceMappingURL=ObservableWatcher.js.map
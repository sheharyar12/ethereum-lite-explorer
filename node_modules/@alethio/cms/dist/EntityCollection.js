import { MixedCollection } from "./MixedCollection";
export class EntityCollection {
    constructor() {
        this.allEntities = new MixedCollection();
        this.dataSources = new MixedCollection();
        this.dataAdapters = new MixedCollection();
        this.pageDefs = new MixedCollection();
        this.moduleDefs = new MixedCollection();
        this.contextDefs = new MixedCollection();
    }
    addDataSource(uri, dataSource) {
        if (!uri.match(/^source:\/\//)) {
            throw new Error(`Invalid data source URI "${uri}"`);
        }
        this.dataSources.add(uri, dataSource);
        this.allEntities.add(uri, dataSource);
    }
    addDataAdapter(uri, dataAdapter) {
        if (!uri.match(/^adapter:\/\//)) {
            throw new Error(`Invalid data adapter URI "${uri}"`);
        }
        this.dataAdapters.add(uri, dataAdapter);
        this.allEntities.add(uri, dataAdapter);
    }
    addPageDef(uri, pageDef) {
        if (!uri.match(/^page:\/\//)) {
            throw new Error(`Invalid page def URI "${uri}"`);
        }
        this.pageDefs.add(uri, pageDef);
        this.allEntities.add(uri, pageDef);
    }
    addModuleDef(uri, moduleDef) {
        if (!uri.match(/^module:\/\//)) {
            throw new Error(`Invalid module def URI "${uri}"`);
        }
        this.moduleDefs.add(uri, moduleDef);
        this.allEntities.add(uri, moduleDef);
    }
    addContextDef(uri, contextDef) {
        if (!uri.match(/^context:\/\//)) {
            throw new Error(`Invalid context def URI "${uri}"`);
        }
        this.contextDefs.add(uri, contextDef);
        this.allEntities.add(uri, contextDef);
    }
    getDataSources() {
        return this.dataSources;
    }
    getDataAdapters() {
        return this.dataAdapters;
    }
    getPageEntities() {
        return new MixedCollection()
            .merge(this.pageDefs)
            .merge(this.contextDefs)
            .merge(this.moduleDefs);
    }
    get(uri) {
        return this.allEntities.get(uri);
    }
    merge(e) {
        [...e.dataAdapters.entries()].forEach(([uri, dataAdapter]) => this.addDataAdapter(uri, dataAdapter));
        [...e.dataSources.entries()].forEach(([uri, dataSource]) => this.addDataSource(uri, dataSource));
        [...e.pageDefs.entries()].forEach(([uri, pageDef]) => this.addPageDef(uri, pageDef));
        [...e.moduleDefs.entries()].forEach(([uri, moduleDef]) => this.addModuleDef(uri, moduleDef));
        [...e.contextDefs.entries()].forEach(([uri, contextDef]) => this.addContextDef(uri, contextDef));
    }
}
//# sourceMappingURL=EntityCollection.js.map
import { __awaiter } from "tslib";
import { ScriptLoader } from "@puzzl/browser/lib/network/ScriptLoader";
import { Task } from "@puzzl/core/lib/async/Task";
import { sleep } from "@puzzl/core/lib/async/sleep";
import { OperationCanceledError } from "@puzzl/core/lib/async/cancellation";
export class PluginLoader {
    constructor(pluginUrlBuilder) {
        this.pluginUrlBuilder = pluginUrlBuilder;
    }
    load(pluginUri, version) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const onError = (ev) => reject(ev.error);
                window.addEventListener("error", onError, { once: true });
                let timeoutTask = new Task((cancelToken) => __awaiter(this, void 0, void 0, function* () {
                    yield sleep(5000, cancelToken);
                    throw new Error(`Plugin code didn't execute in the alotted time. ` +
                        `The JSONP callback (${this.getPluginId(pluginUri)}) was not called.`);
                }));
                let mainCallback = ({ default: plugin, manifest }) => {
                    timeoutTask.cancel();
                    window.removeEventListener("error", onError);
                    resolve({ plugin, manifest });
                };
                this.installMainCallback(pluginUri, mainCallback);
                let pluginBaseUrl = this.pluginUrlBuilder.build(pluginUri, version);
                new ScriptLoader(document).load(`${pluginBaseUrl}/index.js`, {
                    attrs: { crossorigin: "anonymous" }
                }).then(() => {
                    timeoutTask.start().catch(e => {
                        if (!(e instanceof OperationCanceledError)) {
                            reject(e);
                        }
                    });
                }).catch(reject);
            });
        });
    }
    installMainCallback(pluginUri, mainCallback) {
        let pluginId = this.getPluginId(pluginUri);
        window[pluginId] = (exports) => {
            delete window[pluginId];
            mainCallback(exports);
        };
    }
    getPluginId(pluginUri) {
        return "__" + pluginUri
            .replace(/^plugin:\/\//, "")
            .replace(/\./g, "_")
            .replace(/\//g, "__")
            .replace(/-([a-z])/gi, (match, capture) => capture.toUpperCase());
    }
}
//# sourceMappingURL=PluginLoader.js.map
import * as tslib_1 from "tslib";
import * as React from "react";
import { observable } from "mobx";
import { observer } from "mobx-react";
import { QrCodeIcon } from "@alethio/ui/lib/icon/QrCodeIcon";
import { ValueBox } from "@alethio/ui/lib/layout/content/box/ValueBox";
import styled from "@alethio/ui/lib/styled-components";
import { Popover } from "@alethio/ui/lib/overlay/Popover";
import { QrCodeLayer } from "./QrCodeLayer";
import { contains } from "@puzzl/browser/lib/dom";
import * as ReactDOM from "react-dom";
const QrCodeBoxRoot = styled.div `
    cursor: pointer;
`;
let QrCodeBox = class QrCodeBox extends React.Component {
    constructor() {
        super(...arguments);
        this.isHovered = false;
        this.layerVisible = false;
        this.handleLayerRef = (ref) => {
            this.layerEl = ref ? ReactDOM.findDOMNode(ref) : (void 0);
        };
        this.handleTargetRef = (ref) => {
            this.targetEl = ref;
        };
        this.handleMouseEnter = () => {
            this.isHovered = true;
        };
        this.handleMouseLeave = () => {
            this.isHovered = false;
        };
        this.handleDocumentClick = (e) => {
            if (!contains(this.layerEl, e.target) &&
                !contains(this.targetEl, e.target)) {
                this.layerVisible = false;
            }
        };
        this.toggleLayer = () => {
            this.layerVisible = !this.layerVisible;
        };
    }
    componentDidMount() {
        document.addEventListener("click", this.handleDocumentClick);
    }
    componentWillUnmount() {
        document.removeEventListener("click", this.handleDocumentClick);
    }
    render() {
        let hover = this.isHovered;
        return (React.createElement(React.Fragment, null,
            React.createElement(Popover, { placement: "right-start", offset: 8, visible: this.layerVisible, content: React.createElement(QrCodeLayer, { value: this.props.value, logger: this.props.logger, ref: this.handleLayerRef }) },
                React.createElement(QrCodeBoxRoot, { onMouseEnter: this.handleMouseEnter, onMouseLeave: this.handleMouseLeave, onClick: this.toggleLayer, innerRef: this.handleTargetRef },
                    React.createElement(ValueBox, { Icon: QrCodeIcon, colors: (theme) => ({
                            background: theme.colors.valueBox.primary.background,
                            text: hover ? theme.colors.qrCodeIconActive : theme.colors.qrCodeIcon
                        }) })))));
    }
};
tslib_1.__decorate([
    observable
], QrCodeBox.prototype, "isHovered", void 0);
tslib_1.__decorate([
    observable
], QrCodeBox.prototype, "layerVisible", void 0);
QrCodeBox = tslib_1.__decorate([
    observer
], QrCodeBox);
export { QrCodeBox };
//# sourceMappingURL=QrCodeBox.js.map
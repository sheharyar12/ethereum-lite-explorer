import * as tslib_1 from "tslib";
import styled from "@alethio/ui/lib/styled-components";
import * as React from "react";
import { observable } from "mobx";
import { observer } from "mobx-react";
import { Popover } from "@alethio/ui/lib/overlay/Popover";
import { MultiHover } from "@alethio/ui/lib/util/react/MultiHover";
import { TxsHeatMapItems } from "./TxsHeatMapItems";
const TxsHeatMapRoot = styled.div `
    display: flex;
    flex-wrap: wrap;
    flex: 1 1 auto;
    padding: 2px 0px;
`;
let TxsHeatMap = class TxsHeatMap extends React.Component {
    constructor(props) {
        super(props);
        this.handleActiveChange = (tx) => this.hoveredTx = tx;
        this.handleTxEnter = (tx) => {
            this.multiHover.enter(tx);
        };
        this.handleTxLeave = (tx) => {
            this.multiHover.leave();
        };
        this.handleTooltipEnter = () => {
            this.multiHover.enter(this.hoveredTx);
        };
        this.handleTooltipLeave = () => {
            this.multiHover.leave();
        };
        this.setupMultiHover(this.props.multiHover);
    }
    setupMultiHover(multiHover) {
        if (!multiHover) {
            multiHover = new MultiHover({ enterDelay: 400, leaveDelay: 400 });
        }
        this.multiHover = multiHover;
        this.multiHover.onActiveChange.subscribe(this.handleActiveChange);
    }
    componentDidUpdate(prevProps) {
        if (this.props.multiHover !== prevProps.multiHover) {
            this.setupMultiHover(this.props.multiHover);
        }
    }
    componentWillUnmount() {
        this.multiHover.onActiveChange.unsubscribe(this.handleActiveChange);
    }
    render() {
        let values = this.props.transactions.map(tx => this.props.highlightDataSelector(tx));
        let bubbleSizes = this.props.scaleValuesFn(values);
        return (React.createElement(TxsHeatMapRoot, { innerRef: ref => this.rootEl = ref },
            React.createElement(TxsHeatMapItems, { transactions: this.props.transactions, bubbleSizes: bubbleSizes, highlightThreshold: this.props.highlightThreshold, onTxMouseEnter: this.handleTxEnter, onTxMouseLeave: this.handleTxLeave }),
            React.createElement(Popover, { visible: this.hoveredTx !== void 0, placement: "bottom-start", offset: 8, alignmentOffset: -8, noFlip: true, noArrow: true, referenceElement: () => this.rootEl, content: React.createElement("div", { onMouseEnter: this.handleTooltipEnter, onMouseLeave: this.handleTooltipLeave }, this.props.txTooltipThunk(this.hoveredTx)) },
                React.createElement("div", null))));
    }
};
tslib_1.__decorate([
    observable.ref
], TxsHeatMap.prototype, "hoveredTx", void 0);
TxsHeatMap = tslib_1.__decorate([
    observer
], TxsHeatMap);
export { TxsHeatMap };
//# sourceMappingURL=TxsHeatMap.js.map
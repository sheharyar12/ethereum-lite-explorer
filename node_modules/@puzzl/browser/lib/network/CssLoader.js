var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export class CssLoader {
    constructor(document) {
        this.document = document;
    }
    load(cssUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                let linkEl = document.createElement("link");
                linkEl.rel = "stylesheet";
                linkEl.type = "text/css";
                linkEl.href = cssUrl;
                if ('onload' in linkEl) {
                    linkEl.onload = resolve;
                }
                if ('onerror' in linkEl) {
                    linkEl.onerror = () => reject(new Error(`Couldn't load CSS at "${cssUrl}"`));
                }
                // document.head should be not null on supported browsers
                this.document.head.appendChild(linkEl);
                if (!('onload' in linkEl)) {
                    resolve();
                }
            });
        });
    }
}
//# sourceMappingURL=CssLoader.js.map
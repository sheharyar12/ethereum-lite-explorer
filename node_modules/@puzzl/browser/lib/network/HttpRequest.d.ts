export interface IHttpRequestOptions {
    /** See XMLHttpRequest method */
    method?: string;
    timeout?: number;
    /**
     * Data to send with the request (see XMLHttpRequest#send)
     */
    data?: any;
    /**
     * Specifies what type of data the 'data' property contains (default Json)
     */
    dataType?: DataType;
    headers?: Record<string, string>;
}
export declare enum DataType {
    /** data is a {key: value} object which will be stringified before being sent */
    Json = 0,
    /** data is passed directly to XMLHttpRequest#send without any preprocessing */
    Raw = 1
}
/**
 * Promise-based wrapper around XMLHttpRequest
 *
 * Expects response status to be 2xx. Throws HttpRequestError otherwise.
 *
 * Example:
 * ```ts
 * try {
 *     let data = await (new HttpRequest()).fetch("/posts");
 *     console.log(data)
 * } catch (e) {
 *     if (e instanceof HttpRequestError) {
 *         if (e.status === 504) {
 *             // do something special
 *         }
 *     }
 * }
 * ```
 */
export declare class HttpRequest {
    fetch(url: string, options?: IHttpRequestOptions): Promise<string>;
    fetchJson<T>(url: string, options?: IHttpRequestOptions): Promise<T>;
}
//# sourceMappingURL=HttpRequest.d.ts.map
export interface IAsyncEventListener<TSender, TArgs> {
    (args: TArgs, sender: TSender): Promise<void> | void;
}
export interface IAsyncEvent<TSender, TArgs> {
    subscribe(listener: IAsyncEventListener<TSender, TArgs>): void;
    subscribeOnce(listener: IAsyncEventListener<TSender, TArgs>): void;
    unsubscribe(listener: IAsyncEventListener<TSender, TArgs>): void;
}
/**
 * Async message queue. Same as EventDispatcher, but listeners can return a Promise
 * instead of a regular value.
 * @see EventDispatcher
 */
export declare class AsyncEventDispatcher<TSender, TArgs> implements IAsyncEvent<TSender, TArgs> {
    private listeners;
    subscribe(listener: IAsyncEventListener<TSender, TArgs>): void;
    unsubscribe(listener: IAsyncEventListener<TSender, TArgs>): void;
    subscribeOnce(listener: IAsyncEventListener<TSender, TArgs>): void;
    dispatch(sender: TSender, args: TArgs): Promise<void>;
    asEvent(): IAsyncEvent<TSender, TArgs>;
}
//# sourceMappingURL=AsyncEventDispatcher.d.ts.map
import { CancellationTokenSource } from "./CancellationTokenSource";
/**
 * An instance of `CancellationToken` is created by a `CancellationTokenSource` and passed as argument to functions
 * that should be cancellable. The cancellable function can detect and react to the
 * token cancellation in two ways:
 *
 * 1. Call `token.isCancelled()` with a polling mechanism or at key points during its execution
 * 2. Register a callback with `token.register()` that will automatically get called when the token is cancelled
 *
 * When a token cancellation is detected, the function should throw an `OperationCanceledError`,
 * that can be caught by the caller and handled appropriately.
 * For convenience, the `throwIfCancelled` method is provided on the token object
 */
export declare class CancellationToken {
    private source;
    private cancelled;
    /**
     * Shouldn't be instantiated directly, but through a CancellationTokenSource
     */
    constructor(source: CancellationTokenSource);
    /**
     * Throws an OperationCanceledError if the token is in cancelled state
     */
    throwIfCancelled(): void;
    isCancelled(): boolean;
    /**
     * Registers a callback to be called when the token is cancelled.
     * If the token is already in cancelled state, the callback is immediately invoked
     */
    register(callback: () => void): void;
}
//# sourceMappingURL=CancellationToken.d.ts.map